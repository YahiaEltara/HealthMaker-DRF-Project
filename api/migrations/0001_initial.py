# Generated by Django 5.1.3 on 2024-12-01 19:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('client', 'Client'), ('coach', 'Coach')], default='client', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Coach',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=255)),
                ('age', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=20)),
                ('age', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(99)])),
                ('weight', models.FloatField()),
                ('height', models.FloatField()),
                ('goal', models.CharField(choices=[('Lose Weight', 'Lose Weight'), ('Build Muscles', 'Build Muscles'), ('Specific Program', 'Specific Program')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='clients', to='api.coach')),
            ],
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=25)),
                ('details', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.client')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.coach')),
            ],
        ),
        migrations.CreateModel(
            name='Workout_Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('GYM & Cardio', 'GYM & Cardio'), ('GYM', 'GYM'), ('Cardio', 'Cardio'), ('Special Sport', 'Special Sport')], max_length=255)),
                ('details', models.TextField()),
                ('duration', models.TextField(help_text='minutes/once', max_length=255)),
                ('target_calories', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('slug', models.SlugField(blank=True)),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='workout_plans', to='api.client')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.coach')),
            ],
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Breakfast', 'Breakfast'), ('Lunch', 'Lunch'), ('Dinner', 'Dinner'), ('Snack', 'Snack')], max_length=255)),
                ('food_items', models.TextField()),
                ('total_calories', models.FloatField()),
                ('eating_time', models.TimeField()),
                ('created_at', models.DateField(auto_now_add=True)),
                ('slug', models.SlugField(blank=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.client')),
                ('coach', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.coach')),
                ('workout_plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='meals', to='api.workout_plan')),
            ],
            options={
                'ordering': ['eating_time'],
            },
        ),
        migrations.AddIndex(
            model_name='coach',
            index=models.Index(fields=['user'], name='api_coach_user_id_56b833_idx'),
        ),
        migrations.AddIndex(
            model_name='client',
            index=models.Index(fields=['user', 'coach'], name='api_client_user_id_a3d389_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['client', 'coach'], name='api_recomme_client__b43656_idx'),
        ),
        migrations.AddIndex(
            model_name='workout_plan',
            index=models.Index(fields=['client', 'coach'], name='api_workout_client__493dd9_idx'),
        ),
        migrations.AddConstraint(
            model_name='workout_plan',
            constraint=models.UniqueConstraint(fields=('type', 'client'), name='unique_type'),
        ),
        migrations.AddIndex(
            model_name='meal',
            index=models.Index(fields=['type', 'workout_plan'], name='api_meal_type_c537db_idx'),
        ),
        migrations.AddConstraint(
            model_name='meal',
            constraint=models.UniqueConstraint(fields=('type', 'client', 'coach'), name='unique_meal_user'),
        ),
    ]
